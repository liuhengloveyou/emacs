(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(cua-mode t nil (cua-base))
 '(current-language-environment "UTF-8")
 '(custom-enabled-themes (quote (misterioso)))
 '(display-time-mode t)
 ;; '(font-use-system-font t)
 '(save-place t nil (saveplace))
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify) (quote (transient-mark-mode (quote (only . t))))))

;; 个人信息
(setq user-full-name "Heng Liu")
(setq user-mail-address "liuhengloveyou@gmail.com")
;; 编码方式
;;(setenv "LC_CTYPE" "zh_CN.utf-8") ;; 引入系统变量, 中文输入法需要
;;(setq default-buffer-file-coding-system 'utf-8) ;; 新建文件的编码方式
;;(set-terminal-coding-system 'utf-8) ;; 终端方式的编码方式
;;(setq file-name-coding-system 'utf-8) ;; 读取或写入文件名的编码方式
;;(set-buffer-file-coding-system 'utf-8)
;;(set-keyboard-coding-system 'utf-8)
;;(set-selection-coding-system 'utf-8)
;;(prefer-coding-system 'utf-8)
(global-linum-mode 1) ;; 显示行号
(setq column-number-mode t) ;;显示列号
(setq major-mode 'text-mode) ;; 打开就启用text模式
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(display-time-mode t) ;; mode line上的时间显示
(setq display-time-24hr-format t) ;; 时间使用24小时制
(setq display-time-day-and-date nil) ;; 时间显示包括日期和具体时间
(setq display-time-interval 60) ;; 时间变化频率
;; 禁用启动信息
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(setq visible-bell t) ;; 关闭出错时的蜂鸣提示声
(setq ring-bell-function 'ignore) ;; 没有提示音,也不闪屏
(setq echo-keystrokes 0.1) ;; 尽快显示按键序列
(which-function-mode 1) ;; 用来显示当前光标在哪个函数
;; (setq auto-image-file-mode t) ;;让 Emacs 可以直接打开和显示图片
(transient-mark-mode t) ;; 高亮显示要拷贝的区域
(setq-default cursor-type 'bar) ;;光标显示为一竖线
(set-cursor-color "white") ;;光标色
(setq enable-recursive-minibuffers t)
(setq resize-mini-windows t);;允许minibuffer自由变化其宽度大小
(blink-cursor-mode 1) ;;指针要闪
(setq x-select-enable-clipboard t) ;; Linux 下复制内容到系统的剪切板
;;(setq-default indicate-buffer-boundaries 'left) ;; 在fringe上显示一个小箭头指示当前buffer的边界
(autoload 'toggle-emacs-lock "emacs-lock" "Emacs lock" t) ;; emacs lock
(setq kill-do-not-save-duplicates t) ;; 不保存连续的重复的kill
(auto-compression-mode 1) ;; 打开压缩文件时自动解压缩. 必须放在session前面
(add-hook 'gnus-group-mode-hook 'gnus-topic-mode) ;; Group Buffer设置.自动进入Topic-mode
(setq x-select-enable-clipboard t) ;;支持emacs和外部程序的粘贴
(setq Man-notify-method 'pushy) ;; 在emacs读man文档时，使用当前buffer
(setq version-control t) ;;启用备份
(setq kept-old-versions 2) ;;备份最原始的版本两次，记第一次编辑前的文档，和第二次编辑前的文档
(setq kept-new-versions 5) ;;备份最新的版本5次，理解同上
(setq delete-old-versions t) ;;删掉不属于以上7版本的版本
(setq backup-directory-alist '(("." . "~/.emacs.d/backup"))) ;;设置备份文件的路径
(setq backup-by-copying t) ;;备份设置方法，直接拷贝
;;(setq make-backup-files nil) ;; 不产生备份文件
;;(setq backup-inhibited t) ;; 不产生备份
(setq auto-save-default nil) ;; 不生成名为#filename#的临时文件
(setq auto-save-mode t ) ;; 自动保存
(global-auto-revert-mode 1) ;;自动重载更改的文件
(setq mouse-autoselect-window t) ;;当鼠标移动的时候自动转换frame，window或者minibuffer
(fset 'yes-or-no-p 'y-or-n-p) ;;以 y/n代表 yes/no
(set-default 'truncate-lines t) ;; 超长的行不折行显示
;; (global-set-key [C-f10] 'menu-bar-mode) ;;将F10绑定为显示菜单栏
(mouse-avoidance-mode 'animate) ;;光标靠近鼠标指针时，让鼠标指针自动让开，别挡住视线
;; Tell Emacs fill commands to insert two after a colon
(setq colon-double-space t)
(setq require-final-newline t) ;; 在文档最后自动插入空白行
(show-paren-mode t) ;;括号匹配时显示另外一边的括号，而不是烦人的跳到另一个括号
(setq show-paren-style 'parentheses)
(setq frame-title-format '((:eval (getenv-internal "LOGNAME"))"@"(:eval (system-name))":"(:eval (or (buffer-file-name) (buffer-name))))) ;;在标题栏显示buffer的名字.区分不同的主机和用户名称
(transient-mark-mode t) ;; 允许临时设置标记
;; (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*") ;;设置 sentence-end 可以识别中文标点
(setq sentence-end-double-space nil)
;;让 dired 可以递归的拷贝和删除目录
(setq dired-listing-switches "-lh")
(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)
;;可以递归的使用 minibuffer
(setq scroll-margin 3 scroll-conservatively 10000)
;;鼠标滚轮，默认的滚动太快，这里改为3行
(defun up-slightly () (interactive) (scroll-up 3))
(defun down-slightly () (interactive) (scroll-down 3))
(global-set-key [mouse-4] 'down-slightly)
(global-set-key [mouse-5] 'up-slightly)

;; CUA矩阵编辑模式
;; M-x cua-mod
;; 然后移动光标到矩阵左上角并使用 Ctrl-Enter

;;很大的 kill ring
(setq kill-ring-max 200)
(defadvice yank-pop (around kill-ring-browse-maybe (arg))
  "If last action was not a yank, run `browse-kill-ring' instead."
  (if (not (eq last-command 'yank))
      (browse-kill-ring) ad-do-it))
(ad-activate 'yank-pop)
(global-set-key (kbd "C-c k") 'browse-kill-ring)

;; 设置书签文件
;; C-x r m Bookmark     bookmark-set           设置一个名为 Bookmark 的书签
;; C-x r l              bookmarks-bmenu-list    列出所有已保存的书签
;; C-x r b Bookmark     bookmark-jump           跳转至名为 Bookmark 的书签中所设置的位置
;;                      bookmark-delete         删除一个书签
;;                      bookmark-save           将所有的书签保存到书签文件中
;; 跟书签功能类似的寄存器
;; C-x r space X        point-to-register               将光标保存到寄存器 X
;; C-x r s X            copy-to-register                将区域保存到寄存器 X
;; C-x r r X            copy-rectangle-to-register      将选定的矩形区块保存到寄存器 X
;;                      view-register                   查看一个给定的寄存器的内容
;; C-x r j X            jump-to-register                将光标移动到寄存器 X 中给定的位置
;; C-x r i X            insert-register                 在光标处插入寄存器 X 的内容
(setq bookmark-default-file "~/.emacs.d/emacs.bmk")

;; 括号匹配,找到对应的括号{}
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
	((looking-at "\\s\)") (forward-char 1) (backward-list 1))
	(t (self-insert-command (or arg 1)))))
(global-set-key "%" 'match-paren)

;; 自动补全括号
;;(defun my-c-mode-auto-pair ()
;;  (interactive)
;;  (setq skeleton-pair-alist
;; 	'((?` ?` _ "''")
;; 	  (?\( _ ")")
;; 	  (?\[  _ "]")
;; 	  (?{ _ ?} >)
;; 	  (?\" _ "\"")))
;;  (setq skeleton-pair t)
;;  (local-set-key (kbd "(") 'skeleton-pair-insert-maybe)
;;  (local-set-key (kbd "{") 'skeleton-pair-insert-maybe)
;;  (local-set-key (kbd "'") 'skeleton-pair-insert-maybe)
;;  (local-set-key (kbd "[") 'skeleton-pair-insert-maybe)
;;  (local-set-key (kbd "\"") 'skeleton-pair-insert-maybe))
;;(add-hook 'c-mode-hook 'my-c-mode-auto-pair)
;;(add-hook 'c++-mode-hook 'my-c-mode-auto-pair)
;;(add-hook 'after-init-hook 'my-c-mode-auto-pair)

;; dos 和 unix 格式转换
(defun dos2unix ()
  "dos2unix on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'unix))
(defun unix2dos ()
  "unix2dos on current buffer."
  (interactive)
  (set-buffer-file-coding-system 'dos))
;; (define-key global-map (kbd "C-x M-D") 'dos2unix)

;; 显示当前buffer或region或函数的行数和字符数
(defun count-brf-lines (&optional is-fun)
  "显示当前buffer或region或函数的行数和字符数"
  (interactive "P")
  (let (min max)
    (if is-fun
	(save-excursion
	  (beginning-of-defun) (setq min (point))
	  (end-of-defun) (setq max (point))
	  (message "当前函数%s内共有%d行, %d个字符" (which-function) (count-lines min max) (- max min)))
      (if mark-active
	  (progn
	 (setq min (min (point) (mark)))
	 (setq max (max (point) (mark))))
	(setq min (point-min))
	(setq max (point-max)))
      (if (or (= 1 (point-min)) mark-active)
	  (if mark-active
	      (message "当前region内共有%d行, %d个字符" (count-lines min max) (- max min))
	    (message "当前buffer内共有%d行, %d个字符" (count-lines min max) (- max min)))
	(let ((nmin min) (nmax max))
	  (save-excursion
	    (save-restriction
	      (widen)
	      (setq min (point-min))
	      (setq max (point-max))))
	  (message "narrow下buffer内共有%d行, %d个字符, 非narrow下buffer内共有%d行, %d个字符"
		   (count-lines nmin nmax) (- nmax nmin) (count-lines min max) (- max min)))))))
(global-set-key (kbd "C-x l") 'count-brf-lines)
(global-set-key (kbd "C-x L") (lambda () (interactive) (count-brf-lines t)))

;;解决emacs shell乱码
(setq ansi-color-for-comint-mode t)
(setq ansi-color-names-vector ["black" "red" "green" "blue" "yellow" "magenta" "cyan" "white"])
(setq verilog-auto-lineup (quote all))
(customize-group 'ansi-colors)
(kill-this-buffer);;关闭customize窗口
;; shell-command - enables tab-completion for `shell-command'
(setq shell-command-completion-mode 1)
;;shell,gdb退出后，自动关闭该buffer
(defun kill-buffer-when-exit ()
  "Close assotiated buffer when a process exited"
  (let ((current-process (ignore-errors (get-buffer-process (current-buffer)))))
    (when current-process
      (set-process-sentinel current-process
			    (lambda (watch-process change-state)
			      (when (string-match "\\(finished\\|exited\\)" change-state)
				(kill-buffer (process-buffer watch-process))))))))
(add-hook 'gdb-mode-hook 'kill-buffer-when-exit)
(add-hook 'shell-mode-hook 'kill-buffer-when-exitt)

 ;; 回车缩进
(global-set-key "\C-m" 'newline-and-indent)
(global-set-key (kbd "C-<return>") 'newline-and-indent)
(global-set-key [f4] 'whitespace-cleanup) ;; 清除代码中不必要的空格和TAB
(global-set-key "\C-x\C-j" 'align) ;; 变量自动对

;; 插件加载目录
(add-to-list 'load-path "~/.emacs.d/plugins");

;; ibuffer - operate on buffers like dired
(global-set-key (kbd "C-x C-b") 'ibuffer)

;; tab和缩进
(setq indent-tabs-mode t)
(setq tab-width 8)
(setq tab-stop-list ())
(setq tab-always-indent 'complete) ;; 先格式化再补全
;;(loop for x downfrom 40 to 1 do
;;      (setq tab-stop-list (cons (* x 8) tab-stop-list)))

;;高亮光标处单词
(require 'highlight-symbol)
(global-set-key [(control f8)] 'highlight-symbol-at-point)
(global-set-key [f8] 'highlight-symbol-next)
(global-set-key [(shift f8)] 'highlight-symbol-prev)
(global-set-key [(meta f8)] 'highlight-symbol-query-replace)

;; 可视书签
(require 'bm)
(global-set-key (kbd "<left-fringe> <mouse-1>") 'bm-toggle-mouse)
(global-set-key (kbd "<left-fringe> <C-mouse-1>") 'bm-previous-mouse)
(global-set-key (kbd "<left-fringe> <C-mouse-2>") 'bm-next-mouse)

;; ido - interactively do things with buffers and files.
(setq ido-confirm-unique-completion t)
(setq ido-default-buffer-method 'samewindow)
(setq ido-use-filename-at-point t)
(setq ido-enable-flex-matching t)
(ido-mode t)
(ido-everywhere t)
(set-face-background 'ido-first-match "#5A5A5A")
(set-face-foreground 'ido-subdir "yellow")
(setq ido-enable-flex-matching t)

;; tabbar 标签功能
(require 'tabbar)
(tabbar-mode t)
(global-set-key (kbd "<s-up>") 'tabbar-backward-group)
(global-set-key (kbd "<s-down>") 'tabbar-forward-group)
(global-set-key (kbd "<s-left>") 'tabbar-backward)
(global-set-key (kbd "<s-right>") 'tabbar-forward)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CC mode C语言编辑
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 在cscope buffer按u支持多次返回.
;; C-c s a	设定初始化的目录，一般是你代码的根目录
;; C-s s I	对目录中的相关文件建立列表并进行索引
;;
;; C-c s s	序找符号
;; C-c s g	寻找全局的定义
;; C-c s c	看看指定函数被哪些函数所调用
;; C-c s C	看看指定函数调用了哪些函数
;; C-c s e	寻找正则表达式
;; C-c s f	寻找文件
;; C-c s i	看看指定的文件被哪些文件include
;;
;; 建立索引的方法:
;; cd到工程的根目录运行:cscope -bkR
;; -b 仅仅只建立交叉索引,不启动自带的用户界面
;; -q 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
;; -k 不建立对 /usr/include的索引Kernel Mode - don't use /usr/include for #include files
;; -R 递归当前目录寻找文件进行索引
;;
;; cscope使用方法(打开C/C++程序文件时菜单栏上会有Cscope的选项):
;; 1.建立索引
;; 运行M-x cscope-create-list-of-files-to-index 快捷键为C-c s I 建立索引
;; 注意目录选择需要建立索引的根目录
;; 2.进行索引跳转
;; 跳转到对应的tag:运行M-x cscope-find-global-definition-no-prompting 快捷键为C-c s G
;; 3.跳转返回
;; 运行:M-x cscope-pop-mark 快捷键为C-c s u
;; 4.寻找头文件
;; 运行:M-x cscope-find-this-file 快捷键为C-c s f
;;
;; 注意对于跳出cscope可选文件选择窗口 可以采用鼠标中键或者enter打开
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
(setq cscope-program "gtags-cscope") ;; gtags
(require 'xcscope)
(cscope-setup)
(autoload 'gtags-mode "gtags" "" t)
(global-set-key (kbd "<C-M-.>") 'xgtags-find-with-grep)
(global-set-key (kbd "<C-M-;>") 'xgtags-find-rtag)
(global-set-key "\C-cas" 'xgtags-find-symbol)
(global-set-key "\C-cad" 'xgtags-find-tag)
(global-set-key "\C-cac" 'xgtags-find-rtag)
(global-set-key "\C-caf" 'xgtags-find-file)
(global-set-key "\C-cai" 'xgtags-find-with-idutils)
(global-set-key "\C-can" 'xgtags-select-next-tag)
(global-set-key "\C-cap" 'xgtags-select-prev-tag)
(global-set-key "\C-cau" 'xgtags-pop-stack)
(add-hook 'gtags-select-mode-hook
	  '(lambda ()
	     (setq hl-line-face 'underline)
	     (hl-line-mode 1)))

;; C style
(defconst my-c-style
  '((c-toggle-ab-always-indent .t)
    (c-tab-always-indent .t)
    (c-comment-only-line-offset .8)
    (c-hanging-braces-alist
     .((substatement-open after)
       (brace-list-open)))
    (c-hanging-colons-alist
     .((member-init-intro before)
       (inher-intro)
       (case-label after)
       (label after)
       (access-label after)))
    (c-cleanup-list
     .(scope-operator
       empty-defun-braces
       defun-close-semi))
    (c-offsets-alist
     .((arglist-close .c-lineup-arglist)
       (substatement-open .0)
       (case-label .8)
       (block-open .0)
       (knr-argdecl-intro .-)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")

;; offset customizations not in my-c-style
(setq c-offsets-alist '((member-init-intro . ++)))

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  (c-add-style "PERSONAL" my-c-style t)
  (c-set-style "K&R")
  (setq indent-tabs-mode t)
  (setq tab-width 8)
  (setq c-basic-offset 8)
  (setq c-toggle-auto-newline t)
  (c-toggle-hungry-state 1) ;;此模式下，当按Backspace时会删除最多的空格
  (c-toggle-auto-hungry-state 1) ;; auto-newline and hungry-delete
  (which-function-mode) ;;在状态条上显示当前光标在哪个函数体内部
  (local-set-key "\C-c\t" 'complete-symbol)
  (hs-minor-mode 1) ;; 代码折叠
  (gtags-mode 1) ;; 加载GLOBAL
  )
(add-hook 'c-mode-hook 'my-c-mode-common-hook)
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'c++-mode-hook 'my-c-mode-common-hook)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 智能编译 & GDB
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'smart-compile)
(global-set-key [(f5)] 'smart-compile)
(global-set-key (kbd "<f6>") 'gdb)
(global-set-key (kbd "<f7>") 'gdb-many-windows)
;; 自动跳到第一个error
(setq compilation-auto-jump-to-first-error t)
(add-hook 'gdb-mode-hook
	  (lambda ()
	    (local-set-key "\C-u" 'comint-kill-input)
	    (local-set-key "\M-p" 'comint-previous-matching-input-from-input)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CEDET
;; cedet是一堆完全用elisp实现的emacs工具的集合，主要有：
;; EDE: 用来管理项目，它可以把emacs模拟得像一个IDE那样，把一堆文件作为一个project来管理。
;; Semantic: Semantic应该是cedet里用得最多的组件了，代码间跳转和自动补全这两大功能都是通过semantic来实现的
;; SRecode: 是一个模板系统，通过一些预定义的模板，可以很快地插入一段代码。个人觉得这个功能跟msf-abbrev和yasnippet的功能有些类似
;; Cogre: 全称叫”Connected Graph Editor”，主要和图形相关，比如可以用它来为C++类生成UML图
;; Speedbar: Speedbar可以单独创建一个frame，用于显示目录树，函数列表等等。这个组件已经包含在emacs官方发布包中
;; EIEIO: EIEIO是一个底层库，它为elisp加入了OO支持。cedet的其它组件都依赖于EIEIO
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq semantic-default-submodes
      '(
	;; enable这个mode让cedet在emacs空闲的时候自动分析buffer内容，比如正在编辑的buffer内容改变后。这个mode一般应该是需要enable的，如果没有enable这个mode，那只有手工触发才会让cedet重新分析。
	global-semantic-idle-scheduler-mode
	;; semanticdb是semantic用来保存分析后的内容的，所以也是应该enable的。
	global-semanticdb-minor-mode
	;; 打开这个mode之后，光标停留在一个类/函数等tag上时，会在minibuffer显示出这个函数原型
	global-semantic-idle-summary-mode
	;; cedet有tag跳转的功能，但是经常跳转完后还需要跳回刚才的位置. 每次跳转semantic都会把位置当作书签一样记录下来，以后可以通过M-x semantic-mrub-switch-tags（绑定到按键C-x B上）来选择跳回以前的任意一个位置。
	global-semantic-mru-bookmark-mode
	;; 光标在某处停留一段时间后，semantic会自动提示此处可以补全的内容
	global-semantic-idle-completions-mode
	;; emacs会把最近修改过的内容高亮出来
	global-semantic-highlight-edits-mode
	;; 这个mode会把semantic解析不了的内容用红色下划线标识出来
	;; global-semantic-show-unmatched-syntax-mode
	;; semantic会在modeline上显示出当前解析状态
	global-semantic-show-parser-state-mode
	;;
	global-semantic-idle-local-symbol-highlight-mode
	;; semantic会在类/函数等tag上方加一条蓝色的线，源文件很大的时候用它可以提示出哪些是类和函数的头
	global-semantic-decoration-mode
	;; semantic会用灰的底色把光标所在函数名高亮显示
	global-semantic-highlight-func-mode))
(semantic-mode 1)
;;配置Semantic的检索范围
(setq semanticdb-project-roots (list (expand-file-name "/")))
(autoload 'senator-try-expand-semantic "senator")
(setq hippie-expand-try-functions-list
      '(senator-try-expand-semantic
	try-expand-dabbrev
	try-expand-dabbrev-visible
	try-expand-dabbrev-all-buffers
	try-expand-dabbrev-from-kill
	try-expand-list
	try-expand-list-all-buffers
	try-expand-line
	try-expand-line-all-buffers
	try-complete-file-name-partially
	try-complete-file-name
	try-expand-whole-kill))
(global-set-key [(meta ?/)] 'complete-symbol)

;; speedbar
(when window-system (speedbar t))
(speedbar-add-supported-extension ".go")
(global-set-key [M-f12] 'speedbar)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; h/cpp切换. 可以通过命令M-x eassist-switch-h-cpp来切换了
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'eassist nil 'noerror)
(setq semanticdb-project-roots (list (expand-file-name "/")))
(defconst cedet-user-include-dirs
  (list "." "./include" "./inc" "./common" "./public"
	".." "../include" "../inc" "../common" "../public"
	"../.." "../../include" "../../inc" "../../common" "../../public"))
(require 'semantic-c nil 'noerror)
(let ((include-dirs cedet-user-include-dirs))
  (mapc (lambda (dir)
	  (semantic-add-system-include dir 'c++-mode)
	  (semantic-add-system-include dir 'c-mode))
	include-dirs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; yasnippet 模板补全
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/elpa/yasnippet-0.8.0")
(require 'yasnippet)
(yas-global-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  自动补全
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-to-list 'load-path ".emacs.d/elpa/company-0.8.0/")
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(setq company-tooltip-limit 16)                      ; bigger popup window
(setq company-minimum-prefix-length 0)               ; autocomplete right after '.'
(setq company-idle-delay .3)                         ; shorter delay before autocompletion popup
(setq company-echo-delay 0)                          ; removes annoying blinking
(setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
(global-set-key [(ctrl ?/)] 'company-complete)
;;(global-set-key "\M-n" 'company-select-next)
;;(global-set-key "\M-p" 'company-select-previous)
(custom-set-faces
 '(company-preview ((t (:foreground "darkgray" :underline t))))
 '(company-preview-common ((t (:inherit company-preview))))
 '(company-tooltip ((t (:background "lightgray" :foreground "black"))))
 '(company-tooltip-selection ((t (:background "steelblue" :foreground "white"))))
 '(company-tooltip-common ((((type x)) (:inherit company-tooltip :weight bold)) (t (:inherit company-tooltip))))
 '(company-tooltip-common-selection ((((type x)) (:inherit company-tooltip-selection :weight bold)) (t (:inherit company-tooltip-selection))))
 '(company-tooltip-selection ((t (:background "steelblue" :foreground "white")))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 快速include一个系统头文件
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; echo "" | g++ -v -x c++ -E -
(mapc (lambda (mode)
	(define-abbrev-table mode '(("inc" "" skeleton-include 1))))
      '(c-mode-abbrev-table c++-mode-abbrev-table))
;; 输入 inc , 可以自动提示输入文件名称,可以自动补全.
(define-skeleton skeleton-include
  "generate include<>" ""
  > "#include <"
  (completing-read "Include File:"
		   (mapcar #'(lambda (f) (list f ))
			   (apply 'append (mapcar #'(lambda (dir) (directory-files dir))
						  (list "/usr/include/c++/4.8"
							"/usr/include/x86_64-linux-gnu/c++/4.8"
							"/usr/include/c++/4.8/backward"
							"/usr/lib/gcc/x86_64-linux-gnu/4.8/include"
							"/usr/local/include"
							"/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed"
							"/usr/include/x86_64-linux-gnu"
							"/usr/include"
							"/usr/include/sys"
							"/usr/local/include"
							)))))">")

;; 调整字体大小
(global-set-key (kbd "<C-M-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-M-wheel-down>") 'text-scale-decrease)

;; GIT 版本管理
;; (setq load-path (cons (expand-file-name "/usr/share/doc/git-core/contrib/emacs") load-path))
;;  (require 'vc-git)
;;  (when (featurep 'vc-git) (add-to-list 'vc-handled-backends 'git))
;;  (require 'git)
;;  (autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t)
;; find ${GOROOT}/src/pkg/ ./ -name "[^.]*.go" >cscope.files && cscope -Rbkq
;;

;; golang
;; gocode set propose-builtins true
;; gocode set lib-path /media/f2/golang/go/pkg/linux_amd64
(setenv "PATH" (concat (getenv "PATH") ":/Volumes/disk/Develop/golang/mygo/bin"))
(setq exec-path (append exec-path '("/Volumes/disk/Develop/golang/mygo/bin")))
(setenv "PATH" (concat (getenv "PATH") ":/Volumes/disk/Develop/golang/go/bin"))
(setq exec-path (append exec-path '("/Volumes/disk/Develop/golang/go/bin")))
(require 'go-mode-load)
(require 'company-go)
(add-hook 'go-mode-hook
	  (lambda ()
	    (set (make-local-variable 'company-backends) '(company-go))
	    (company-mode)
	    (cscope-minor-mode)
	    ;; Imenu & Speedbar
	    (setq imenu-generic-expression
		  '(("type" "^type *\\([^ \t\n\r\f]*\\)" 1)
		    ("func" "^func *\\(.*\\) {" 1)))
	    (imenu-add-to-menubar "Index")))

;; lua-mode
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
